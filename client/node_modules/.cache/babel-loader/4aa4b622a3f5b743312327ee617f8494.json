{"ast":null,"code":"'use strict';\n\nvar isFullwidthCodePoint = require('is-fullwidth-code-point');\n\nvar ESCAPES = [\"\\x1B\", \"\\x9B\"];\nvar END_CODE = 39;\nvar ASTRAL_REGEX = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nvar ESCAPE_CODES = new Map([[0, 0], [1, 22], [2, 22], [3, 23], [4, 24], [7, 27], [8, 28], [9, 29], [30, 39], [31, 39], [32, 39], [33, 39], [34, 39], [35, 39], [36, 39], [37, 39], [90, 39], [40, 49], [41, 49], [42, 49], [43, 49], [44, 49], [45, 49], [46, 49], [47, 49]]);\n\nvar wrapAnsi = function wrapAnsi(code) {\n  return \"\".concat(ESCAPES[0], \"[\").concat(code, \"m\");\n};\n\nmodule.exports = function (str, begin, end) {\n  var arr = Array.from(str.normalize());\n  end = typeof end === 'number' ? end : arr.length;\n  var insideEscape = false;\n  var escapeCode;\n  var visible = 0;\n  var output = '';\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = arr.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var item = _step.value;\n      var i = item[0];\n      var x = item[1];\n      var leftEscape = false;\n\n      if (ESCAPES.indexOf(x) !== -1) {\n        insideEscape = true;\n        var code = /\\d[^m]*/.exec(str.slice(i, i + 4));\n        escapeCode = code === END_CODE ? null : code;\n      } else if (insideEscape && x === 'm') {\n        insideEscape = false;\n        leftEscape = true;\n      }\n\n      if (!insideEscape && !leftEscape) {\n        ++visible;\n      }\n\n      if (!ASTRAL_REGEX.test(x) && isFullwidthCodePoint(x.codePointAt())) {\n        ++visible;\n      }\n\n      if (visible > begin && visible <= end) {\n        output += x;\n      } else if (visible === begin && !insideEscape && escapeCode !== undefined && escapeCode !== END_CODE) {\n        output += wrapAnsi(escapeCode);\n      } else if (visible >= end) {\n        if (escapeCode !== undefined) {\n          output += wrapAnsi(ESCAPE_CODES.get(parseInt(escapeCode, 10)) || END_CODE);\n        }\n\n        break;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return output;\n};","map":null,"metadata":{},"sourceType":"script"}