{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _makeStreamConfig = require('./makeStreamConfig');\n\nvar _makeStreamConfig2 = _interopRequireDefault(_makeStreamConfig);\n\nvar _drawRow = require('./drawRow');\n\nvar _drawRow2 = _interopRequireDefault(_drawRow);\n\nvar _drawBorder = require('./drawBorder');\n\nvar _stringifyTableData = require('./stringifyTableData');\n\nvar _stringifyTableData2 = _interopRequireDefault(_stringifyTableData);\n\nvar _truncateTableData = require('./truncateTableData');\n\nvar _truncateTableData2 = _interopRequireDefault(_truncateTableData);\n\nvar _mapDataUsingRowHeightIndex = require('./mapDataUsingRowHeightIndex');\n\nvar _mapDataUsingRowHeightIndex2 = _interopRequireDefault(_mapDataUsingRowHeightIndex);\n\nvar _alignTableData = require('./alignTableData');\n\nvar _alignTableData2 = _interopRequireDefault(_alignTableData);\n\nvar _padTableData = require('./padTableData');\n\nvar _padTableData2 = _interopRequireDefault(_padTableData);\n\nvar _calculateRowHeightIndex = require('./calculateRowHeightIndex');\n\nvar _calculateRowHeightIndex2 = _interopRequireDefault(_calculateRowHeightIndex);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @param {Array} data\n * @param {Object} config\n * @returns {Array}\n */\n\n\nvar prepareData = function prepareData(data, config) {\n  var rows;\n  rows = (0, _stringifyTableData2.default)(data);\n  rows = (0, _truncateTableData2.default)(data, config);\n  var rowHeightIndex = (0, _calculateRowHeightIndex2.default)(rows, config);\n  rows = (0, _mapDataUsingRowHeightIndex2.default)(rows, rowHeightIndex, config);\n  rows = (0, _alignTableData2.default)(rows, config);\n  rows = (0, _padTableData2.default)(rows, config);\n  return rows;\n};\n/**\n * @param {string[]} row\n * @param {number[]} columnWidthIndex\n * @param {Object} config\n * @returns {undefined}\n */\n\n\nvar create = function create(row, columnWidthIndex, config) {\n  var rows = prepareData([row], config);\n  var body = rows.map(function (literalRow) {\n    return (0, _drawRow2.default)(literalRow, config.border);\n  }).join('');\n  var output;\n  output = '';\n  output += (0, _drawBorder.drawBorderTop)(columnWidthIndex, config.border);\n  output += body;\n  output += (0, _drawBorder.drawBorderBottom)(columnWidthIndex, config.border);\n  output = _lodash2.default.trimEnd(output);\n  process.stdout.write(output);\n};\n/**\n * @param {string[]} row\n * @param {number[]} columnWidthIndex\n * @param {Object} config\n * @returns {undefined}\n */\n\n\nvar append = function append(row, columnWidthIndex, config) {\n  var rows = prepareData([row], config);\n  var body = rows.map(function (literalRow) {\n    return (0, _drawRow2.default)(literalRow, config.border);\n  }).join('');\n  var output;\n  output = \"\\r\\x1B[K\";\n  output += (0, _drawBorder.drawBorderJoin)(columnWidthIndex, config.border);\n  output += body;\n  output += (0, _drawBorder.drawBorderBottom)(columnWidthIndex, config.border);\n  output = _lodash2.default.trimEnd(output);\n  process.stdout.write(output);\n};\n/**\n * @param {Object} userConfig\n * @returns {Object}\n */\n\n\nexports.default = function () {\n  var userConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var config = (0, _makeStreamConfig2.default)(userConfig);\n\n  var columnWidthIndex = _lodash2.default.mapValues(config.columns, function (column) {\n    return column.width + column.paddingLeft + column.paddingRight;\n  });\n\n  var empty;\n  empty = true;\n  return {\n    /**\n     * @param {string[]} row\n     * @returns {undefined}\n     */\n    write: function write(row) {\n      if (row.length !== config.columnCount) {\n        throw new Error('Row cell count does not match the config.columnCount.');\n      }\n\n      if (empty) {\n        empty = false;\n        return create(row, columnWidthIndex, config);\n      } else {\n        return append(row, columnWidthIndex, config);\n      }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}