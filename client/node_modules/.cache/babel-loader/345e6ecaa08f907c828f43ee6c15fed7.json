{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _drawTable = require('./drawTable');\n\nvar _drawTable2 = _interopRequireDefault(_drawTable);\n\nvar _calculateCellWidthIndex = require('./calculateCellWidthIndex');\n\nvar _calculateCellWidthIndex2 = _interopRequireDefault(_calculateCellWidthIndex);\n\nvar _makeConfig = require('./makeConfig');\n\nvar _makeConfig2 = _interopRequireDefault(_makeConfig);\n\nvar _calculateRowHeightIndex = require('./calculateRowHeightIndex');\n\nvar _calculateRowHeightIndex2 = _interopRequireDefault(_calculateRowHeightIndex);\n\nvar _mapDataUsingRowHeightIndex = require('./mapDataUsingRowHeightIndex');\n\nvar _mapDataUsingRowHeightIndex2 = _interopRequireDefault(_mapDataUsingRowHeightIndex);\n\nvar _alignTableData = require('./alignTableData');\n\nvar _alignTableData2 = _interopRequireDefault(_alignTableData);\n\nvar _padTableData = require('./padTableData');\n\nvar _padTableData2 = _interopRequireDefault(_padTableData);\n\nvar _validateTableData = require('./validateTableData');\n\nvar _validateTableData2 = _interopRequireDefault(_validateTableData);\n\nvar _stringifyTableData = require('./stringifyTableData');\n\nvar _stringifyTableData2 = _interopRequireDefault(_stringifyTableData);\n\nvar _truncateTableData = require('./truncateTableData');\n\nvar _truncateTableData2 = _interopRequireDefault(_truncateTableData);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * @typedef {string} table~cell\n */\n\n/**\n * @typedef {table~cell[]} table~row\n */\n\n/**\n * @typedef {Object} table~columns\n * @property {string} alignment Cell content alignment (enum: left, center, right) (default: left).\n * @property {number} width Column width (default: auto).\n * @property {number} truncate Number of characters are which the content will be truncated (default: Infinity).\n * @property {number} paddingLeft Cell content padding width left (default: 1).\n * @property {number} paddingRight Cell content padding width right (default: 1).\n */\n\n/**\n * @typedef {Object} table~border\n * @property {string} topBody\n * @property {string} topJoin\n * @property {string} topLeft\n * @property {string} topRight\n * @property {string} bottomBody\n * @property {string} bottomJoin\n * @property {string} bottomLeft\n * @property {string} bottomRight\n * @property {string} bodyLeft\n * @property {string} bodyRight\n * @property {string} bodyJoin\n * @property {string} joinBody\n * @property {string} joinLeft\n * @property {string} joinRight\n * @property {string} joinJoin\n */\n\n/**\n * Used to tell whether to draw a horizontal line.\n * This callback is called for each non-content line of the table.\n * The default behavior is to always return true.\n *\n * @typedef {Function} drawHorizontalLine\n * @param {number} index\n * @param {number} size\n * @returns {boolean}\n */\n\n/**\n * @typedef {Object} table~config\n * @property {table~border} border\n * @property {table~columns[]} columns Column specific configuration.\n * @property {table~columns} columnDefault Default values for all columns. Column specific settings overwrite the default values.\n * @property {table~drawHorizontalLine} drawHorizontalLine\n */\n\n/**\n * Generates a text table.\n *\n * @param {table~row[]} data\n * @param {table~config} userConfig\n * @returns {string}\n */\n\n\nexports.default = function (data) {\n  var userConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var rows;\n  (0, _validateTableData2.default)(data);\n  rows = (0, _stringifyTableData2.default)(data);\n  var config = (0, _makeConfig2.default)(rows, userConfig);\n  rows = (0, _truncateTableData2.default)(data, config);\n  var rowHeightIndex = (0, _calculateRowHeightIndex2.default)(rows, config);\n  rows = (0, _mapDataUsingRowHeightIndex2.default)(rows, rowHeightIndex, config);\n  rows = (0, _alignTableData2.default)(rows, config);\n  rows = (0, _padTableData2.default)(rows, config);\n  var cellWidthIndex = (0, _calculateCellWidthIndex2.default)(rows[0]);\n  return (0, _drawTable2.default)(rows, config.border, cellWidthIndex, rowHeightIndex, config.drawHorizontalLine);\n};","map":null,"metadata":{},"sourceType":"script"}