{"ast":null,"code":"'use strict';\n\nvar equal = require('ajv/lib/compile/equal');\n\nvar validate = function () {\n  var pattern0 = new RegExp('^[0-9]+$');\n  var refVal = [];\n\n  var refVal1 = function () {\n    var pattern0 = new RegExp('^[0-9]+$');\n    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {\n      'use strict';\n\n      var vErrors = null;\n      var errors = 0;\n      if (rootData === undefined) rootData = data;\n\n      if (data && typeof data === \"object\" && !Array.isArray(data)) {\n        var errs__0 = errors;\n        var valid1 = true;\n\n        for (var key0 in data) {\n          var isAdditional0 = !(false || validate.schema.properties[key0]);\n\n          if (isAdditional0) {\n            valid1 = false;\n            var err = {\n              keyword: 'additionalProperties',\n              dataPath: (dataPath || '') + \"\",\n              schemaPath: '#/additionalProperties',\n              params: {\n                additionalProperty: '' + key0 + ''\n              },\n              message: 'should NOT have additional properties'\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          }\n        }\n\n        if (data.topBody !== undefined) {\n          var errs_1 = errors;\n\n          if (!refVal2(data.topBody, (dataPath || '') + '.topBody', data, 'topBody', rootData)) {\n            if (vErrors === null) vErrors = refVal2.errors;else vErrors = vErrors.concat(refVal2.errors);\n            errors = vErrors.length;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.topJoin !== undefined) {\n          var errs_1 = errors;\n\n          if (!refVal[2](data.topJoin, (dataPath || '') + '.topJoin', data, 'topJoin', rootData)) {\n            if (vErrors === null) vErrors = refVal[2].errors;else vErrors = vErrors.concat(refVal[2].errors);\n            errors = vErrors.length;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.topLeft !== undefined) {\n          var errs_1 = errors;\n\n          if (!refVal[2](data.topLeft, (dataPath || '') + '.topLeft', data, 'topLeft', rootData)) {\n            if (vErrors === null) vErrors = refVal[2].errors;else vErrors = vErrors.concat(refVal[2].errors);\n            errors = vErrors.length;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.topRight !== undefined) {\n          var errs_1 = errors;\n\n          if (!refVal[2](data.topRight, (dataPath || '') + '.topRight', data, 'topRight', rootData)) {\n            if (vErrors === null) vErrors = refVal[2].errors;else vErrors = vErrors.concat(refVal[2].errors);\n            errors = vErrors.length;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.bottomBody !== undefined) {\n          var errs_1 = errors;\n\n          if (!refVal[2](data.bottomBody, (dataPath || '') + '.bottomBody', data, 'bottomBody', rootData)) {\n            if (vErrors === null) vErrors = refVal[2].errors;else vErrors = vErrors.concat(refVal[2].errors);\n            errors = vErrors.length;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.bottomJoin !== undefined) {\n          var errs_1 = errors;\n\n          if (!refVal[2](data.bottomJoin, (dataPath || '') + '.bottomJoin', data, 'bottomJoin', rootData)) {\n            if (vErrors === null) vErrors = refVal[2].errors;else vErrors = vErrors.concat(refVal[2].errors);\n            errors = vErrors.length;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.bottomLeft !== undefined) {\n          var errs_1 = errors;\n\n          if (!refVal[2](data.bottomLeft, (dataPath || '') + '.bottomLeft', data, 'bottomLeft', rootData)) {\n            if (vErrors === null) vErrors = refVal[2].errors;else vErrors = vErrors.concat(refVal[2].errors);\n            errors = vErrors.length;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.bottomRight !== undefined) {\n          var errs_1 = errors;\n\n          if (!refVal[2](data.bottomRight, (dataPath || '') + '.bottomRight', data, 'bottomRight', rootData)) {\n            if (vErrors === null) vErrors = refVal[2].errors;else vErrors = vErrors.concat(refVal[2].errors);\n            errors = vErrors.length;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.bodyLeft !== undefined) {\n          var errs_1 = errors;\n\n          if (!refVal[2](data.bodyLeft, (dataPath || '') + '.bodyLeft', data, 'bodyLeft', rootData)) {\n            if (vErrors === null) vErrors = refVal[2].errors;else vErrors = vErrors.concat(refVal[2].errors);\n            errors = vErrors.length;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.bodyRight !== undefined) {\n          var errs_1 = errors;\n\n          if (!refVal[2](data.bodyRight, (dataPath || '') + '.bodyRight', data, 'bodyRight', rootData)) {\n            if (vErrors === null) vErrors = refVal[2].errors;else vErrors = vErrors.concat(refVal[2].errors);\n            errors = vErrors.length;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.bodyJoin !== undefined) {\n          var errs_1 = errors;\n\n          if (!refVal[2](data.bodyJoin, (dataPath || '') + '.bodyJoin', data, 'bodyJoin', rootData)) {\n            if (vErrors === null) vErrors = refVal[2].errors;else vErrors = vErrors.concat(refVal[2].errors);\n            errors = vErrors.length;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.joinBody !== undefined) {\n          var errs_1 = errors;\n\n          if (!refVal[2](data.joinBody, (dataPath || '') + '.joinBody', data, 'joinBody', rootData)) {\n            if (vErrors === null) vErrors = refVal[2].errors;else vErrors = vErrors.concat(refVal[2].errors);\n            errors = vErrors.length;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.joinLeft !== undefined) {\n          var errs_1 = errors;\n\n          if (!refVal[2](data.joinLeft, (dataPath || '') + '.joinLeft', data, 'joinLeft', rootData)) {\n            if (vErrors === null) vErrors = refVal[2].errors;else vErrors = vErrors.concat(refVal[2].errors);\n            errors = vErrors.length;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.joinRight !== undefined) {\n          var errs_1 = errors;\n\n          if (!refVal[2](data.joinRight, (dataPath || '') + '.joinRight', data, 'joinRight', rootData)) {\n            if (vErrors === null) vErrors = refVal[2].errors;else vErrors = vErrors.concat(refVal[2].errors);\n            errors = vErrors.length;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.joinJoin !== undefined) {\n          var errs_1 = errors;\n\n          if (!refVal[2](data.joinJoin, (dataPath || '') + '.joinJoin', data, 'joinJoin', rootData)) {\n            if (vErrors === null) vErrors = refVal[2].errors;else vErrors = vErrors.concat(refVal[2].errors);\n            errors = vErrors.length;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n      } else {\n        var err = {\n          keyword: 'type',\n          dataPath: (dataPath || '') + \"\",\n          schemaPath: '#/type',\n          params: {\n            type: 'object'\n          },\n          message: 'should be object'\n        };\n        if (vErrors === null) vErrors = [err];else vErrors.push(err);\n        errors++;\n      }\n\n      validate.errors = vErrors;\n      return errors === 0;\n    };\n  }();\n\n  refVal1.schema = {\n    \"type\": \"object\",\n    \"properties\": {\n      \"topBody\": {\n        \"$ref\": \"#/definitions/border\"\n      },\n      \"topJoin\": {\n        \"$ref\": \"#/definitions/border\"\n      },\n      \"topLeft\": {\n        \"$ref\": \"#/definitions/border\"\n      },\n      \"topRight\": {\n        \"$ref\": \"#/definitions/border\"\n      },\n      \"bottomBody\": {\n        \"$ref\": \"#/definitions/border\"\n      },\n      \"bottomJoin\": {\n        \"$ref\": \"#/definitions/border\"\n      },\n      \"bottomLeft\": {\n        \"$ref\": \"#/definitions/border\"\n      },\n      \"bottomRight\": {\n        \"$ref\": \"#/definitions/border\"\n      },\n      \"bodyLeft\": {\n        \"$ref\": \"#/definitions/border\"\n      },\n      \"bodyRight\": {\n        \"$ref\": \"#/definitions/border\"\n      },\n      \"bodyJoin\": {\n        \"$ref\": \"#/definitions/border\"\n      },\n      \"joinBody\": {\n        \"$ref\": \"#/definitions/border\"\n      },\n      \"joinLeft\": {\n        \"$ref\": \"#/definitions/border\"\n      },\n      \"joinRight\": {\n        \"$ref\": \"#/definitions/border\"\n      },\n      \"joinJoin\": {\n        \"$ref\": \"#/definitions/border\"\n      }\n    },\n    \"additionalProperties\": false\n  };\n  refVal1.errors = null;\n  refVal[1] = refVal1;\n\n  var refVal2 = function () {\n    var pattern0 = new RegExp('^[0-9]+$');\n    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {\n      'use strict';\n\n      var vErrors = null;\n      var errors = 0;\n\n      if (typeof data !== \"string\") {\n        var err = {\n          keyword: 'type',\n          dataPath: (dataPath || '') + \"\",\n          schemaPath: '#/type',\n          params: {\n            type: 'string'\n          },\n          message: 'should be string'\n        };\n        if (vErrors === null) vErrors = [err];else vErrors.push(err);\n        errors++;\n      }\n\n      validate.errors = vErrors;\n      return errors === 0;\n    };\n  }();\n\n  refVal2.schema = {\n    \"type\": \"string\"\n  };\n  refVal2.errors = null;\n  refVal[2] = refVal2;\n\n  var refVal3 = function () {\n    var pattern0 = new RegExp('^[0-9]+$');\n    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {\n      'use strict';\n\n      var vErrors = null;\n      var errors = 0;\n      if (rootData === undefined) rootData = data;\n\n      if (data && typeof data === \"object\" && !Array.isArray(data)) {\n        var errs__0 = errors;\n        var valid1 = true;\n\n        for (var key0 in data) {\n          var isAdditional0 = !(false || pattern0.test(key0));\n\n          if (isAdditional0) {\n            valid1 = false;\n            var err = {\n              keyword: 'additionalProperties',\n              dataPath: (dataPath || '') + \"\",\n              schemaPath: '#/additionalProperties',\n              params: {\n                additionalProperty: '' + key0 + ''\n              },\n              message: 'should NOT have additional properties'\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          }\n        }\n\n        for (var key0 in data) {\n          if (pattern0.test(key0)) {\n            var errs_1 = errors;\n\n            if (!refVal4(data[key0], (dataPath || '') + '[\\'' + key0 + '\\']', data, key0, rootData)) {\n              if (vErrors === null) vErrors = refVal4.errors;else vErrors = vErrors.concat(refVal4.errors);\n              errors = vErrors.length;\n            }\n\n            var valid1 = errors === errs_1;\n          }\n        }\n      } else {\n        var err = {\n          keyword: 'type',\n          dataPath: (dataPath || '') + \"\",\n          schemaPath: '#/type',\n          params: {\n            type: 'object'\n          },\n          message: 'should be object'\n        };\n        if (vErrors === null) vErrors = [err];else vErrors.push(err);\n        errors++;\n      }\n\n      validate.errors = vErrors;\n      return errors === 0;\n    };\n  }();\n\n  refVal3.schema = {\n    \"type\": \"object\",\n    \"patternProperties\": {\n      \"^[0-9]+$\": {\n        \"$ref\": \"#/definitions/column\"\n      }\n    },\n    \"additionalProperties\": false\n  };\n  refVal3.errors = null;\n  refVal[3] = refVal3;\n\n  var refVal4 = function () {\n    var pattern0 = new RegExp('^[0-9]+$');\n    return function validate(data, dataPath, parentData, parentDataProperty, rootData) {\n      'use strict';\n\n      var vErrors = null;\n      var errors = 0;\n\n      if (data && typeof data === \"object\" && !Array.isArray(data)) {\n        var errs__0 = errors;\n        var valid1 = true;\n\n        for (var key0 in data) {\n          var isAdditional0 = !(false || validate.schema.properties[key0]);\n\n          if (isAdditional0) {\n            valid1 = false;\n            var err = {\n              keyword: 'additionalProperties',\n              dataPath: (dataPath || '') + \"\",\n              schemaPath: '#/additionalProperties',\n              params: {\n                additionalProperty: '' + key0 + ''\n              },\n              message: 'should NOT have additional properties'\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          }\n        }\n\n        var data1 = data.alignment;\n\n        if (data1 !== undefined) {\n          var errs_1 = errors;\n\n          if (typeof data1 !== \"string\") {\n            var err = {\n              keyword: 'type',\n              dataPath: (dataPath || '') + '.alignment',\n              schemaPath: '#/properties/alignment/type',\n              params: {\n                type: 'string'\n              },\n              message: 'should be string'\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          }\n\n          var schema1 = validate.schema.properties.alignment.enum;\n          var valid1;\n          valid1 = false;\n\n          for (var i1 = 0; i1 < schema1.length; i1++) {\n            if (equal(data1, schema1[i1])) {\n              valid1 = true;\n              break;\n            }\n          }\n\n          if (!valid1) {\n            var err = {\n              keyword: 'enum',\n              dataPath: (dataPath || '') + '.alignment',\n              schemaPath: '#/properties/alignment/enum',\n              params: {\n                allowedValues: schema1\n              },\n              message: 'should be equal to one of the allowed values'\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.width !== undefined) {\n          var errs_1 = errors;\n\n          if (typeof data.width !== \"number\") {\n            var err = {\n              keyword: 'type',\n              dataPath: (dataPath || '') + '.width',\n              schemaPath: '#/properties/width/type',\n              params: {\n                type: 'number'\n              },\n              message: 'should be number'\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.wrapWord !== undefined) {\n          var errs_1 = errors;\n\n          if (typeof data.wrapWord !== \"boolean\") {\n            var err = {\n              keyword: 'type',\n              dataPath: (dataPath || '') + '.wrapWord',\n              schemaPath: '#/properties/wrapWord/type',\n              params: {\n                type: 'boolean'\n              },\n              message: 'should be boolean'\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.truncate !== undefined) {\n          var errs_1 = errors;\n\n          if (typeof data.truncate !== \"number\") {\n            var err = {\n              keyword: 'type',\n              dataPath: (dataPath || '') + '.truncate',\n              schemaPath: '#/properties/truncate/type',\n              params: {\n                type: 'number'\n              },\n              message: 'should be number'\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.paddingLeft !== undefined) {\n          var errs_1 = errors;\n\n          if (typeof data.paddingLeft !== \"number\") {\n            var err = {\n              keyword: 'type',\n              dataPath: (dataPath || '') + '.paddingLeft',\n              schemaPath: '#/properties/paddingLeft/type',\n              params: {\n                type: 'number'\n              },\n              message: 'should be number'\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n\n        if (data.paddingRight !== undefined) {\n          var errs_1 = errors;\n\n          if (typeof data.paddingRight !== \"number\") {\n            var err = {\n              keyword: 'type',\n              dataPath: (dataPath || '') + '.paddingRight',\n              schemaPath: '#/properties/paddingRight/type',\n              params: {\n                type: 'number'\n              },\n              message: 'should be number'\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          }\n\n          var valid1 = errors === errs_1;\n        }\n      } else {\n        var err = {\n          keyword: 'type',\n          dataPath: (dataPath || '') + \"\",\n          schemaPath: '#/type',\n          params: {\n            type: 'object'\n          },\n          message: 'should be object'\n        };\n        if (vErrors === null) vErrors = [err];else vErrors.push(err);\n        errors++;\n      }\n\n      validate.errors = vErrors;\n      return errors === 0;\n    };\n  }();\n\n  refVal4.schema = {\n    \"type\": \"object\",\n    \"properties\": {\n      \"alignment\": {\n        \"type\": \"string\",\n        \"enum\": [\"left\", \"right\", \"center\"]\n      },\n      \"width\": {\n        \"type\": \"number\"\n      },\n      \"wrapWord\": {\n        \"type\": \"boolean\"\n      },\n      \"truncate\": {\n        \"type\": \"number\"\n      },\n      \"paddingLeft\": {\n        \"type\": \"number\"\n      },\n      \"paddingRight\": {\n        \"type\": \"number\"\n      }\n    },\n    \"additionalProperties\": false\n  };\n  refVal4.errors = null;\n  refVal[4] = refVal4;\n  return function validate(data, dataPath, parentData, parentDataProperty, rootData) {\n    'use strict';\n    /*# sourceURL=config.json */\n\n    var vErrors = null;\n    var errors = 0;\n    if (rootData === undefined) rootData = data;\n\n    if (data && typeof data === \"object\" && !Array.isArray(data)) {\n      var errs__0 = errors;\n      var valid1 = true;\n\n      for (var key0 in data) {\n        var isAdditional0 = !(false || key0 == 'border' || key0 == 'columns' || key0 == 'columnDefault' || key0 == 'drawHorizontalLine');\n\n        if (isAdditional0) {\n          valid1 = false;\n          var err = {\n            keyword: 'additionalProperties',\n            dataPath: (dataPath || '') + \"\",\n            schemaPath: '#/additionalProperties',\n            params: {\n              additionalProperty: '' + key0 + ''\n            },\n            message: 'should NOT have additional properties'\n          };\n          if (vErrors === null) vErrors = [err];else vErrors.push(err);\n          errors++;\n        }\n      }\n\n      if (data.border !== undefined) {\n        var errs_1 = errors;\n\n        if (!refVal1(data.border, (dataPath || '') + '.border', data, 'border', rootData)) {\n          if (vErrors === null) vErrors = refVal1.errors;else vErrors = vErrors.concat(refVal1.errors);\n          errors = vErrors.length;\n        }\n\n        var valid1 = errors === errs_1;\n      }\n\n      if (data.columns !== undefined) {\n        var errs_1 = errors;\n\n        if (!refVal3(data.columns, (dataPath || '') + '.columns', data, 'columns', rootData)) {\n          if (vErrors === null) vErrors = refVal3.errors;else vErrors = vErrors.concat(refVal3.errors);\n          errors = vErrors.length;\n        }\n\n        var valid1 = errors === errs_1;\n      }\n\n      if (data.columnDefault !== undefined) {\n        var errs_1 = errors;\n\n        if (!refVal[4](data.columnDefault, (dataPath || '') + '.columnDefault', data, 'columnDefault', rootData)) {\n          if (vErrors === null) vErrors = refVal[4].errors;else vErrors = vErrors.concat(refVal[4].errors);\n          errors = vErrors.length;\n        }\n\n        var valid1 = errors === errs_1;\n      }\n\n      if (data.drawHorizontalLine !== undefined) {\n        var errs_1 = errors;\n        var errs__1 = errors;\n        var valid1;\n        valid1 = typeof data.drawHorizontalLine == \"function\";\n\n        if (!valid1) {\n          if (errs__1 == errors) {\n            var err = {\n              keyword: 'typeof',\n              dataPath: (dataPath || '') + '.drawHorizontalLine',\n              schemaPath: '#/properties/drawHorizontalLine/typeof',\n              params: {\n                keyword: 'typeof'\n              },\n              message: 'should pass \"typeof\" keyword validation'\n            };\n            if (vErrors === null) vErrors = [err];else vErrors.push(err);\n            errors++;\n          } else {\n            for (var i1 = errs__1; i1 < errors; i1++) {\n              var ruleErr1 = vErrors[i1];\n              if (ruleErr1.dataPath === undefined) ruleErr1.dataPath = (dataPath || '') + '.drawHorizontalLine';\n\n              if (ruleErr1.schemaPath === undefined) {\n                ruleErr1.schemaPath = \"#/properties/drawHorizontalLine/typeof\";\n              }\n            }\n          }\n        }\n\n        var valid1 = errors === errs_1;\n      }\n    } else {\n      var err = {\n        keyword: 'type',\n        dataPath: (dataPath || '') + \"\",\n        schemaPath: '#/type',\n        params: {\n          type: 'object'\n        },\n        message: 'should be object'\n      };\n      if (vErrors === null) vErrors = [err];else vErrors.push(err);\n      errors++;\n    }\n\n    validate.errors = vErrors;\n    return errors === 0;\n  };\n}();\n\nvalidate.schema = {\n  \"$id\": \"config.json\",\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"border\": {\n      \"$ref\": \"#/definitions/borders\"\n    },\n    \"columns\": {\n      \"$ref\": \"#/definitions/columns\"\n    },\n    \"columnDefault\": {\n      \"$ref\": \"#/definitions/column\"\n    },\n    \"drawHorizontalLine\": {\n      \"typeof\": \"function\"\n    }\n  },\n  \"additionalProperties\": false,\n  \"definitions\": {\n    \"columns\": {\n      \"type\": \"object\",\n      \"patternProperties\": {\n        \"^[0-9]+$\": {\n          \"$ref\": \"#/definitions/column\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"column\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"alignment\": {\n          \"type\": \"string\",\n          \"enum\": [\"left\", \"right\", \"center\"]\n        },\n        \"width\": {\n          \"type\": \"number\"\n        },\n        \"wrapWord\": {\n          \"type\": \"boolean\"\n        },\n        \"truncate\": {\n          \"type\": \"number\"\n        },\n        \"paddingLeft\": {\n          \"type\": \"number\"\n        },\n        \"paddingRight\": {\n          \"type\": \"number\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"borders\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"topBody\": {\n          \"$ref\": \"#/definitions/border\"\n        },\n        \"topJoin\": {\n          \"$ref\": \"#/definitions/border\"\n        },\n        \"topLeft\": {\n          \"$ref\": \"#/definitions/border\"\n        },\n        \"topRight\": {\n          \"$ref\": \"#/definitions/border\"\n        },\n        \"bottomBody\": {\n          \"$ref\": \"#/definitions/border\"\n        },\n        \"bottomJoin\": {\n          \"$ref\": \"#/definitions/border\"\n        },\n        \"bottomLeft\": {\n          \"$ref\": \"#/definitions/border\"\n        },\n        \"bottomRight\": {\n          \"$ref\": \"#/definitions/border\"\n        },\n        \"bodyLeft\": {\n          \"$ref\": \"#/definitions/border\"\n        },\n        \"bodyRight\": {\n          \"$ref\": \"#/definitions/border\"\n        },\n        \"bodyJoin\": {\n          \"$ref\": \"#/definitions/border\"\n        },\n        \"joinBody\": {\n          \"$ref\": \"#/definitions/border\"\n        },\n        \"joinLeft\": {\n          \"$ref\": \"#/definitions/border\"\n        },\n        \"joinRight\": {\n          \"$ref\": \"#/definitions/border\"\n        },\n        \"joinJoin\": {\n          \"$ref\": \"#/definitions/border\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"border\": {\n      \"type\": \"string\"\n    }\n  }\n};\nvalidate.errors = null;\nmodule.exports = validate;","map":null,"metadata":{},"sourceType":"script"}